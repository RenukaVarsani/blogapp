
// exports.postReset = async (req, res) => {

//   const token = randomstring.generate({
//     length: 12,
//     capitalization: "lowercase"
//   })

//   try {
//     User.findOne({ email: req.body.email }).then
//       (user => {
//         if (!user) {
//           return res.status(400).send({ error: 'Invalid email' })

//         }
//         user.resetToken = token;
//         user.resetTokenExpiration = Date.now() + 3600000;

//       }).then(result => {
//        // res.redirect('/login');
//         transporter.sendMail({
//           to: req.body.email,
//           from: 'renuka.varsani@aspiresoftserv.in',
//           subject: 'Password reset',
//           html: `
//             <h2>You requested a password reset</h2>
//             <p>Click this <a href="http://localhost:4200/resetpassword/${token}">link</a> to set a new password.</p>
//           `
//         }).then((data) => {
//           console.log("mail sent successfully");
//         }).catch((error) => {
//           console.log(error.message);
//         });
//         //res.redirect('/login')


//       })

//   } catch (e) {
//     console.log(e.error);
//   }

// }

// exports.getNewPassword = (req, res, next) => {
//   const token = req.params.token;
//   User.findOne({ resetToken: token, resetTokenExpiration: { $gt: Date.now() } })
//     .then(user => {
//       let message = req.flash('error');
//       if (message.length > 0) {
//         message = message[0];
//       } else {
//         message = null;
//       }
//       res.redirect();
//     })
//     .catch(err => {
//       console.log(err);
//     });
// };


// exports.postNewPassword = (req, res) => {
//   const newPassword = req.body.password;
//   const userId = req.body.userId;
//   const passwordToken = req.body.passwordToken;
//   let resetUser;

//   User.findOne({
//     resetToken: passwordToken,
//     resetTokenExpiration: { $gt: Date.now() },
//     _id: userId
//   })
//     .then( user => {
//       resetUser = user;
//       return  bcrypt.hash(newPassword, 8);
//     })
//     .then(hashedPassword => {
//       resetUser.password = hashedPassword;
//       resetUser.resetToken = undefined;
//       resetUser.resetTokenExpiration = undefined;
//       return resetUser.save();
//     })
//     .then(result => {
//       res.redirect('/login');
//     })
//     .catch(err => {
//       console.log(err);
//     });
// };